#+TITLE: My emacs doom configuration
#+AUTHOR: Rieljun Liguid
#+EMAIL: me@iamriel.com
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :results silent :padline no

* Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#personal-information][Personal Information]]
    - [[#set-full-name][Set full name]]
    - [[#set-email-address][Set email address]]
    - [[#authinfo][Authinfo]]
  - [[#utils][Utils]]
    - [[#lookup-gpg-password][Lookup gpg password]]
    - [[#filebuffer-actions][File/buffer actions]]
    - [[#save-and-set-to-normal-state][Save and set to normal state]]
    - [[#check-if-process-is-running][Check if process is running]]
  - [[#doom-core][Doom Core]]
    - [[#core][Core]]
    - [[#keybinds][Keybinds]]
    - [[#ui][Ui]]
  - [[#doom-modules][Doom modules]]
    - [[#appemail][app/email]]
    - [[#appeverywhere][app/everywhere]]
    - [[#completioncompany][completion/company]]
    - [[#completionivy][completion/ivy]]
    - [[#completionvertico][completion/vertico]]
    - [[#editorparinfer][editor/parinfer]]
    - [[#emacsvc][emacs/vc]]
    - [[#langpython][lang/python]]
    - [[#langjavascript][lang/javascript]]
    - [[#langorg][lang/org]]
    - [[#langrest][lang/rest]]
    - [[#langrust][lang/rust]]
    - [[#langsql][lang/sql]]
    - [[#termvterm][term/vterm]]
    - [[#toolsrgb][tools/rgb]]
    - [[#toolsmagit][tools/magit]]
    - [[#toolslsp][tools/lsp]]
    - [[#toolskubel][tools/kubel]]
    - [[#uidoom][ui/doom]]
    - [[#uidoom-dashboard][ui/doom-dashboard]]
    - [[#uiindent-guides][ui/indent-guides]]
    - [[#uitreemacs][ui/treemacs]]
    - [[#uiwindow-select][ui/window-select]]
  - [[#custom-packages][Custom Packages]]
    - [[#org-jira][org-jira]]
    - [[#tramp][Tramp]]
    - [[#ox-gfm][ox-gfm]]
    - [[#copilot][copilot]]

* Configuration
** Personal Information
*** Set full name

#+begin_src emacs-lisp
(setq user-full-name "Rieljun Liguid")
(add-load-path! "packages")
(add-load-path! "/home/light/projects/open_source/hotfuzz/build")

(use-package! keychain-environment
  :init
  (keychain-refresh-environment))
#+END_SRC

*** Set email address

#+begin_src emacs-lisp
(setq user-mail-address "me@iamriel.com")
#+END_SRC

*** Authinfo

#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+end_src
** Utils
*** Lookup gpg password
#+begin_src emacs-lisp
(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
      nil)))
#+end_src
*** File/buffer actions
#+begin_src emacs-lisp
(defun +custom/get-file-path ()
  "Retrieve the file path of the current buffer.
Returns:
  - A string containing the file path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (file-path (buffer-file-name))
    (file-truename file-path)))

(defun +custom/yank-filename ()
  "Copy and show the file name of the current buffer."
  (interactive)
  (if-let (filename (file-name-nondirectory (+custom/get-file-path)))
      (message "Copied filename to clipboard: %s"
               (kill-new filename))
    (error "Couldn't find filename in current buffer")))

(defun +custom/yank-filename-base ()
  "Copy and show the file name without its final extension of the current
buffer."
  (interactive)
  (if-let (filename (file-name-base (+custom/get-file-path)))
      (progn
        (kill-new filename)
        (message "%s" filename))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun +custom/yank-buffer-name ()
  "Copy and show the name of the current buffer."
  (interactive)
  (kill-new (buffer-name))
  (message "%s" (buffer-name)))
#+end_src
*** Save and set to normal state
#+begin_src emacs-lisp
(defun +custom/save-buffer ()
  (interactive)
  (save-buffer)
  (evil-normal-state))

(map! :im "C-s" #'+custom/save-buffer)
#+end_src

*** Check if process is running
#+begin_src emacs-lisp
;;;###autoload
(defun check-process-running-p (process-name)
  "Check if the specified PROCESS-NAME is running.
Returns `t` if the process is running, and `nil` otherwise."
  (ignore-errors
    (let ((output (string-trim-right (shell-command-to-string (format "ps aux | grep %s | grep -v grep" process-name)))))
      (not (string-empty-p output)))))
#+end_src
** Doom Core
*** Core
**** Workarounds
#+begin_src emacs-lisp
;; https://gitmemory.cn/repo/hlissner/doom-emacs/issues/5904

;; (after! lsp-mode
;;   (advice-remove #'lsp #'+lsp-dont-prompt-to-install-servers-maybe-a))
#+end_src
**** Do not create lockfiles for files being edited

#+begin_src emacs-lisp
(setq create-lockfiles nil)
(setq lsp-diagnostic-package :none)

; https://emacs.stackexchange.com/questions/64556/how-to-suppress-warning-about-positional-arguments-in-define-minor-mode
(defun radian--advice-silence-messages (func &rest args)
  "Invoke FUNC with ARGS, silencing all messages. This is an `:around' advice for many different functions."
  (cl-letf (((symbol-function #'message) #'ignore))
     (apply func args)))

(dolist (func '(define-minor-mode))
  (advice-add func :around #'radian--advice-silence-messages))

; https://issueexplorer.com/issue/hlissner/doom-emacs/5785
(general-auto-unbind-keys :off)
(remove-hook 'doom-after-init-modules-hook #'general-auto-unbind-keys)
#+END_SRC

**** Themes

#+begin_src emacs-lisp
(setq doom-theme 'doom-nord)
#+END_SRC

**** Consider underscore as part of a word

#+begin_src emacs-lisp
(add-hook! 'after-change-major-mode-hook (modify-syntax-entry ?_ "w"))
#+END_SRC

**** Evil config

#+begin_src emacs-lisp
(setq! doom-localleader-key ",")
(setq! evil-escape-key-sequence "fd"
       evil-move-cursor-back nil
       evil-escape-excluded-major-modes '(neotree-mode treemacs-mode))

;; disable o/O in continuing commented lines
(setq! +evil-want-o/O-to-continue-comments nil)
#+END_SRC

**** Enable paste transient

#+begin_src emacs-lisp
(defhydra hydra-paste (:color red
                       :hint nil)
  "\n[%s(length kill-ring-yank-pointer)/%s(length kill-ring)] \
 [_C-j_/_C-k_] cycles through yanked text, [_p_/_P_] pastes the same text \
 above or below. Anything else exits."
  ("C-j" evil-paste-pop)
  ("C-k" evil-paste-pop-next)
  ("p" evil-paste-after)
  ("P" evil-paste-before))

(map! :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)
#+END_SRC

**** Word Wrap

#+begin_src emacs-lisp
;; enable word-wrap (almost) everywhere
(+global-word-wrap-mode +1)
#+END_SRC

*** Keybinds

Here I set my keybinds these are applied on top of the [[doom-modules:config/default/+emacs-bindings.el][defaults]]

**** Global keybinds

#+begin_src emacs-lisp
(map! :i "C-y" #'yas-expand)
(map! :nv "C-s" #'save-buffer)

;; Drag stuff
(map!
 (:after evil
  :nv "[ e" #'drag-stuff-up
  :nv "] e" #'drag-stuff-down))

(map! :leader

      :desc "Toggle zen mode"
      :nv "z" #'+zen/toggle-fullscreen

      (:prefix "t"
       :desc "Vertico posframe mode" "v" #'vertico-posframe-mode)

      (:prefix "y"
       :desc "Yank filename" "n" #'+custom/yank-filename
       :desc "Yank base filename" "b" #'+custom/yank-filename-base)

      (:prefix "c"
       :desc "prettier" "p" #'prettier-js)

      (:when (modulep! :app calendar)
        :prefix "o"
        :desc "Calendar" "c" #'+calendar/open-calendar)

      (:when (modulep! :tools kubel)
        :prefix "o"
        (:prefix ("k" . "kubectl")
         :desc "integration" "i" #'(lambda () (interactive) (=kubel "integration"))
         :desc "performance" "p" #'(lambda () (interactive) (=kubel "performance"))
         :desc "staging" "s" #'(lambda () (interactive) (=kubel "staging"))
         :desc "testing" "t" #'(lambda () (interactive) (=kubel "development"))))

      (:when (modulep! :app calendar)
        :prefix "o"
        :desc "Calendar" "c" #'+calendar/open-calendar)

      (:when (modulep! :ui window-select)
        :prefix "w"
        :desc "Ace window" "a" #'ace-window)
      )
#+END_SRC

**** Leader keybinds

#+begin_src emacs-lisp
(map! :leader
      (:prefix "TAB"
        :desc "Rename workspace"       "r"  #'+workspace/rename))
#+END_SRC

**** Use ~] SPC~ and ~[ SPC~ to insert newlines above and below
 Similar to [[github:tpope/vim-unimpaired][vim-unimpaired]]

#+begin_src emacs-lisp
(map!
 (:after evil
   :m  "] SPC" #'evil-motion-insert-newline-below
   :m  "[ SPC" #'evil-motion-insert-newline-above))
#+END_SRC

**** Easy window navigation

#+begin_src emacs-lisp
(map!
 (:after evil
   :en "C-h"   #'evil-window-left
   :en "C-j"   #'evil-window-down
   :en "C-k"   #'evil-window-up
   :en "C-l"   #'evil-window-right))
#+END_SRC

**** Org Mode

#+begin_src emacs-lisp
(map! (:localleader
        (:after evil-org
          :map evil-org-mode-map
          "/" #'counsel-org-goto
          "h" #'org-insert-heading
          "H" #'org-insert-subheading)))
#+END_SRC

**** Dired

#+begin_src emacs-lisp
(map!
 (:after dired
    (:map dired-mode-map
    "C-SPC" #'peep-dired)))
#+END_SRC

**** Treemacs

Allow ~C-h~ and ~C-l~ to switch buffers
#+begin_src emacs-lisp
(map!
 (:after treemacs-evil
   (:map evil-treemacs-state-map
     "C-h" #'evil-window-left
     "C-l" #'evil-window-right)))
#+END_SRC

**** Show keybind help with less of a delay

#+begin_src emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.5
        which-key-idle-secondary-delay 0.01
        which-key-sort-order 'which-key-key-order-alpha))
#+END_SRC

*** Ui

**** Resize the frame pixelwise. Making emacs compatible with tiling window managers

#+begin_src emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC

**** Highlight trailing whitespace

#+begin_src emacs-lisp
(setq show-trailing-whitespace t)
#+END_SRC

**** Set the scale factor for ~all-the-icons~

#+begin_src emacs-lisp
(after! all-the-icons
  (setq all-the-icons-scale-factor 1.0))
#+END_SRC

**** Immediately show eldoc

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0)
#+END_SRC

**** Clean up interface, make it minimal

#+begin_src emacs-lisp
(tooltip-mode -1)       ; Disable tooltips
(set-fringe-mode 10)    ; Give some breathing room
#+end_src

**** Prevents some cases of Emacs flickering
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

** Doom modules

Here I make customization to all the modules I have enabled in doom.
Each of the headers is a link to their respective module
*** app/email

**** Install
My configuration requires:
+ ~[[github:djnym/isync][isync]]~ (for syncing emails)
+ ~[[github:djcb/mu][mu]]~ (for indexing emails)

**** Configuration
***** Isync
****** [[file:~/.config/mbsync/config][Mbsync config]]
Configure mbsync to fetch emails /see also:/ https://wiki.archlinux.org/index.php/isync

#+begin_src conf :tangle ~/.config/mbsync/config
IMAPAccount kizen
Host imap.gmail.com
User riel@kizen.com
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | awk '/machine smtp.gmail.com login riel@kizen.com password/ {print $6}'"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore kizen-remote
Account kizen

MaildirStore kizen-local
SubFolders Verbatim
Path ~/.mail/kizen/
Inbox ~/.mail/kizen/INBOX

Channel kizen
Far :kizen-remote:
Near :kizen-local:
Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail/All Mail]" "[Gmail]/Trash"
Create Both
SyncState *
#+END_SRC

****** Emacs setup
Configure emacs to use mbsync as the ~mu4e-get-mail-command~

#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-get-mail-command "mbsync -c ~/.config/mbsync/config -a"))
#+END_SRC

***** Mu4e
****** Directories
Setup the deafault /maildirs/

#+begin_src emacs-lisp
(setq! mu4e-maildir        (expand-file-name "~/.mail")
      mu4e-attachment-dir (expand-file-name "attachments" mu4e-maildir))
#+END_SRC

****** Gmail setup
Configure smtp and folders to work well with gmail

#+begin_src emacs-lisp
(setq! smtpmail-stream-type 'starttls
      smtpmail-smtp-user "riel@kizen.com"
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq! mu4e-sent-folder "/kizen/[Gmail]/Sent Mail"
      mu4e-drafts-folder "/kizen/[Gmail]/Drafts"
      mu4e-trash-folder "/kizen/[Gmail]/Trash"
      mu4e-refile-folder "/kizen/[Gmail]/All Mail")

(setq! mu4e-maildir-shortcuts
      '(("/kizen/INBOX"     . ?i)
        ("/kizen/[Gmail]/Sent Mail" . ?s)
        ("/kizen/[Gmail]/Drafts" . ?s)
        ("/kizen/[Gmail]/Trash"     . ?t)))
#+END_SRC

****** Bookmarks
Set bookmarks for easily finding messages

#+begin_src emacs-lisp
(setq mu4e-bookmarks
      `(("maildir:/kizen/INBOX" "Inbox" ?i)
        ("maildir:/kizen/JIRA" "JIRA" ?j)
        ("maildir:/kizen/[Gmail]/Drafts" "Drafts" ?d)
        ("flag:unread AND maildir:/kizen/INBOX" "Unread messages" ?u)
        ("flag:unread AND maildir:/kizen/JIRA" "Unread JIRA messages" ?J)
        ("maildir:/kizen/[Gmail]/Sent Mail" "Sent" ?s)
        ("flag:flagged" "Starred messages" ?S)
        ("date:today..now" "Today's messages" ?t)
        ("date:7d..now" "Last 7 days" ?w)
        ("mime:image/*" "Messages with images" ?p)))

#+END_SRC

****** Prettify mu4e mbsync filter
https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaking-change/

#+begin_src emacs-lisp
(defun mu4e-pretty-mbsync-process-filter (proc msg)
  (ignore-errors
    (with-current-buffer (process-buffer proc)
      (let ((inhibit-read-only t))
        (delete-region (point-min) (point-max))
        (insert (car (reverse (split-string msg "\r"))))
        (when (re-search-backward "\\(C:\\).*\\(B:\\).*\\(M:\\).*\\(S:\\)")
          (add-face-text-property
           (match-beginning 1) (match-end 1) 'font-lock-keyword-face)
          (add-face-text-property
           (match-beginning 2) (match-end 2) 'font-lock-function-name-face)
          (add-face-text-property
           (match-beginning 3) (match-end 3) 'font-lock-builtin-face)
          (add-face-text-property
           (match-beginning 4) (match-end 4) 'font-lock-type-face))))))

(advice-add
 'mu4e~get-mail-process-filter
 :override #'mu4e-pretty-mbsync-process-filter)
#+end_src
****** Alert / Notification
#+begin_src emacs-lisp
(use-package! mu4e-alert
  :after mu4e
  :config
  (cond (IS-MAC (mu4e-alert-set-default-style 'notifier))
        (IS-LINUX (mu4e-alert-set-default-style 'libnotify)))
  (setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread"
       " AND NOT flag:trashed"
       " AND NOT maildir:"
       "\"/kizen/[Gmail]/Trash\""))
  (mu4e-alert-enable-notifications)
  (mu4e-alert-enable-mode-line-display))
#+end_src
*** app/everywhere
#+begin_src emacs-lisp
(remove-hook
 'emacs-everywhere-init-hooks
 #'emacs-everywhere-major-mode-org-or-markdown) ; or #'org-mode if that's what's present

(add-hook
 'emacs-everywhere-init-hooks
 #'gfm-mode)  ; github flavored markdown mode
#+end_src

*** completion/company

**** Set maximum candidates for ~company-box~

#+begin_src emacs-lisp
(after! company-box
  (setq company-box-max-candidates 5))
#+END_SRC

**** Setup company ui

#+begin_src emacs-lisp
(after! company
  (setq company-tooltip-limit 5
        company-tooltip-minimum-width 80
        company-tooltip-minimum 5
        company-backends
        '(company-capf company-dabbrev company-files company-yasnippet)
        company-global-modes '(not comint-mode erc-mode message-mode help-mode gud-mode)))
#+END_SRC

*** completion/ivy
**** Setup ~ivy-rich~

#+begin_src emacs-lisp
(after! ivy-rich
  (setq ivy-rich--display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30 :face bold))
            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))
            (ivy-rich-switch-buffer-path (:width 50)))
           :predicate
           (lambda (cand) (get-buffer cand)))
          +ivy/switch-workspace-buffer
          (:columns
           ((ivy-rich-candidate (:width 30 :face bold))
            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))
            (ivy-rich-switch-buffer-path (:width 50)))
           :predicate
           (lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face :width 80))))
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 100))
            (ivy-rich-file-last-modified-time (:face font-lock-doc-face)))))))

(after! counsel
  (setq counsel-evil-registers-height 20
        counsel-yank-pop-height 20
        counsel-org-goto-face-style 'org
        counsel-org-headline-display-style 'title
        counsel-org-headline-display-tags t
        counsel-org-headline-display-todo t))
#+END_SRC

#+begin_src emacs-lisp
(after! ivy
  (setq ivy-use-selectable-prompt t
        ivy-auto-select-single-candidate t
        ivy-rich-parse-remote-buffer nil
        +ivy-buffer-icons nil
        ivy-use-virtual-buffers nil
        ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-cd-selected
        ivy-height 20
        ivy-rich-switch-buffer-name-max-length 50))
#+END_SRC

**** Add helpful action to ~counsel-M-x~

#+begin_src emacs-lisp
(after! ivy
  (ivy-add-actions
   'counsel-M-x
   `(("h" +ivy/helpful-function "Helpful"))))
#+END_SRC

*** completion/vertico
#+begin_src emacs-lisp
;; (use-package! hotfuzz
;;   :init
;;   (setq completion-ignore-case t))

;; (use-package! savehist
;;   :init
;;   (savehist-mode))
;; (use-package! vertico-posframe
;;   :config
;;   (setq vertico-posframe-border-width 1))

(defun posframe-poshandler-frame-below-center (info)
  "Posframe's position handler.

Let posframe(0.5, 0.5) align to frame(0.5, 0.5).  The structure of
INFO can be found in docstring of `posframe-show'."
  (cons (/ (- (plist-get info :parent-frame-width)
              (plist-get info :posframe-width))
           2)
        (+ (/ (- (plist-get info :parent-frame-height)
              (/ (plist-get info :posframe-height) 2))
           2) 100)))

(defun flex-if-twiddle (pattern _index _total)
  (when (string-suffix-p "~" pattern)
    `(orderless-flex . ,(substring pattern 0 -1))))

(defun first-initialism (pattern index _total)
  (if (= index 0) 'orderless-initialism))

(defun without-if-bang (pattern _index _total)
  (cond
   ((equal "!" pattern)
    '(orderless-literal . ""))
   ((string-prefix-p "!" pattern)
    `(orderless-without-literal . ,(substring pattern 1)))))

(after! vertico
  (vertico-prescient-mode 1)
  (prescient-persist-mode 1)
  (vertico-posframe-mode t)
  (setq orderless-matching-styles '(orderless-regexp)
        orderless-style-dispatchers '(first-initialism flex-if-twiddle without-if-bang)
        prescient-filter-method '(literal initialism prefix regexp)
        prescient-use-char-folding t
        prescient-use-case-folding 'smart
        ;; prescient-sort-full-matches-first t ; Works well with `initialism'.
        ;; prescient-sort-length-enable t
        completion-styles '(orderless basic)
        completion-category-overrides '((file (styles basic partial-completion)))
        completion-ignore-case t
        read-buffer-completion-ignore-case t
        vertico-posframe-border-width 1))


;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

*** editor/parinfer

**** Automatically switch parinfer mode

#+begin_src emacs-lisp
(after! parinfer
  (setq parinfer-auto-switch-indent-mode t))
#+END_SRC

*** emacs/vc

**** Folow symlinks when opening files

#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

*** lang/python

**** Use python-flake8 instead of python-pylint

#+begin_src emacs-lisp

(add-hook!
 'lsp-after-initialize-hook
 (lambda
   () (flycheck-add-next-checker 'python-flake8 'python-pylint 'python-mypy 'rustic-clippy)))

#+END_SRC

**** Auto activate virtual environment if .venv file is present

#+begin_src emacs-lisp
(defun +custom/flycheck-python-set-executables ()
  "Set flycheck python executables for the current virtualenv."
  (let ((exec-path (python-shell-calculate-exec-path)))
    (setq-local flycheck-python-pylint-executable (executable-find "pylint"))
    (setq-local flycheck-python-flake8-executable (executable-find "flake8"))
    (setq-local pyimport-flake8-path (executable-find "flake8"))
    ))

(defun +custom/flycheck-python-setup ()
  "Setup flycheck for Python with virtualenvs. "
  ;; +custom/flycheck-python-set-executables uses buffer-local variables
  (add-hook 'hack-local-variables-hook #'+custom/flycheck-python-set-executables
            nil 'local))

;; Taken from spacemacs
(defun pyvenv-mode-set-local-virtualenv ()
  "Set pyvenv virtualenv from \".venv\" by looking in parent directories.
Handle \".venv\" being a virtualenv directory or a file specifying either
absolute or relative virtualenv path. Relative path is checked relative to
location of \".venv\" file, then relative to pyvenv-workon-home()."
  (interactive)
  (let ((root-path (locate-dominating-file default-directory ".venv")))
    (when root-path
      (let ((file-path (expand-file-name ".venv" root-path)))
        (cond ((file-directory-p file-path)
               (pyvenv-activate file-path) (setq-local pyvenv-activate file-path))
              (t (let* ((virtualenv-path-in-file
                         (with-temp-buffer
                           (insert-file-contents-literally file-path)
                           (buffer-substring-no-properties (line-beginning-position)
                                                           (line-end-position))))
                        (virtualenv-abs-path
                         (if (file-name-absolute-p virtualenv-path-in-file)
                             virtualenv-path-in-file
                           (format "%s/%s" root-path virtualenv-path-in-file))))
                   (cond ((file-directory-p virtualenv-abs-path)
                          (pyvenv-activate virtualenv-abs-path)
                          (setq-local pyvenv-activate virtualenv-abs-path))
                         (t (pyvenv-workon virtualenv-path-in-file)
                            (setq-local pyvenv-workon virtualenv-path-in-file)))))))))
  (+custom/flycheck-python-setup))

(add-hook! 'projectile-after-switch-project-hook #'pyvenv-mode-set-local-virtualenv)
#+END_SRC

**** Auto set python version if .python-version file is present

#+begin_src emacs-lisp
;; Taken from spacemacs
(defun pyenv-mode-set-local-version ()
  "Set pyenv version from \".python-version\" by looking in parent directories."
  (interactive)
  (let ((root-path (locate-dominating-file default-directory
                                           ".python-version")))
    (when root-path
      (let* ((file-path (expand-file-name ".python-version" root-path))
             (version
              (with-temp-buffer
                (insert-file-contents-literally file-path)
                (nth 0 (split-string (buffer-substring-no-properties
                                      (line-beginning-position)
                                      (line-end-position)))))))
        (if (member version (pyenv-mode-versions))
            (progn
              (setenv "VIRTUAL_ENV" version)
              (pyenv-mode-set version))
          (message "pyenv: version `%s' is not installed (set by %s)"
                   version file-path))))))

(add-hook! 'projectile-after-switch-project-hook #'pyenv-mode-set-local-version)
#+END_SRC

**** Python mode hook

#+begin_src emacs-lisp
(add-hook!
 'python-mode-hook #'yas-minor-mode-on)
#+END_SRC

**** Python formatter
#+begin_src emacs-lisp
;;;###autoload
(defun set-python-formatter-to-blackd ()
  "Set the formatter for Python code to 'blackd' if available.
If 'blackd' is running, set the formatter to 'blackd-client' and
enable Python formatting on save for the 'python-mode'. If 'blackd'
is not running, disable Python formatting on save."
  (if (and (executable-find "blackd-client")
           (check-process-running-p "blackd"))
      (progn
        (set-formatter! 'black "blackd-client --url http://0.0.0.0:45484" :modes '(python-mode))
        (setq +format-on-save-enabled-modes
              '(python-mode))
        )
    (setq +format-on-save-enabled-modes
          nil)))

(add-hook! 'python-mode-hook #'set-python-formatter-to-blackd)


;;;###autoload
(defun +python/format-buffer-hook (formatter status)
  (when (and (member status '(:reformatted :already-formatted))
             (eq major-mode 'python-mode)
             (executable-find "isort")
             (executable-find "flake8"))
    (+python/optimize-imports)))

(add-hook 'pyimport-after-remove-unused-hook #'+format/region-or-buffer)
(add-hook 'format-all-after-format-functions #'+python/format-buffer-hook)
#+end_src

**** Python pytest
#+begin_src emacs-lisp
(after! python-pytest
  (map!
   :map python-pytest-mode-map
   :n
   "q" #'previous-buffer)
  :config
  (setq python-pytest-pdb-track nil))

;; when pytest finishes, it goes back to compilation mode
(add-hook! 'python-pytest-finished-hook #'python-pytest-mode)
#+end_src

**** Kizen Test
#+begin_src emacs-lisp
(use-package! kizen-test
  :load-path "/home/light/.doom.d/packages/kizen-test"
  :commands (kizen-test kizen-test-file kizen-test-function kizen-test-repeat kizen-test-yank-function)
  :init
  (map! :after python
        :localleader
        :map python-mode-map
        :prefix ("k" . "kizen-test")
        "a" #'kizen-test
        "f" #'kizen-test-file
        "F" #'kizen-test-file-dwim
        "t" #'kizen-test-function
        "T" #'kizen-test-function-dwim
        "r" #'kizen-test-repeat
        "p" #'kizen-test-dispatch
        "y" #'kizen-test-yank-function))

(map!
 :map kizen-test-mode-map
 :n
 "q" #'previous-buffer)
#+end_src

**** Python interpreter settings
#+begin_src emacs-lisp
(setq!
 python-shell-interpreter "ipython"
 python-shell-interpreter-args "--simple-prompt -i")
#+end_src

*** lang/javascript

**** Set the ~NODE_ENV~ environemnt variable

#+begin_src emacs-lisp
(setenv "NODE_ENV" "development")
#+END_SRC

**** Set default indentation offset to 2 spaces

#+begin_src emacs-lisp
(after! js2-mode (setq js2-basic-offset 2))
#+END_SRC

**** Enable bounce indentation

#+begin_src emacs-lisp
(after! js2-mode (setq js2-bounce-indent-p t))
#+END_SRC

**** Auto format buffers

#+begin_src emacs-lisp
(defun sort-and-optimize-imports ()
  (interactive)
  (+python/optimize-imports)
  (py-isort-buffer))

(defun format-and-sort-buffer ()
  (interactive)
  (sort-and-optimize-imports)
  (format-all-buffer))
#+END_SRC

*** lang/org
**** Set default directories for org files

#+begin_src emacs-lisp
(after! org-mode
  (setq +org-directory (expand-file-name "~/Org Files")
        org-agenda-files (list org-directory)))
#+END_SRC

**** Change the character that displays on collapsed headings

#+begin_src emacs-lisp
(setq org-ellipsis " ▼ ")
#+END_SRC

**** Change the default bullet character

#+begin_src emacs-lisp
(after! org-bullets
  (setq org-bullets-bullet-list '("#")))
#+END_SRC

**** Set default notes filename

#+begin_src emacs-lisp
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)))
#+END_SRC

**** Set maximum number of files for refile

#+begin_src emacs-lisp
(after! org
  (setq
   org-log-done 'time
   org-refile-targets '((nil :maxlevel . 5)
                        (org-agenda-files :maxlevel . 5))))
#+END_SRC

**** Strike through done headlines

#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (
                 :weight bold
                 :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:strike-through t)))))
#+END_SRC

**** Aditional config

#+begin_src emacs-lisp
(after! org
  :config
  (setq +org-dir org-directory
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-todo-file (expand-file-name "todo.org" org-directory)
        org-capture-templates
        '(("k" "Kizen JIRA" entry (file+headline org-todo-file "Kizen JIRA")
           "* TODO KZN-%^{Ticket #} %?\nhttps://kizen.atlassian.net/browse/KZN-%\\1\nEntered on: %T\n")
          ("s" "Schedule" entry (file+headline org-todo-file "Schedule")
           "* TODO %?\nSCHEDULED: %^T")
          ("t" "Task" entry (file+headline org-todo-file "Tasks")
           "* TODO %?\nEntered on: %T")
          ("n" "Note" entry (file+olp+datetree org-todo-file)
           "* %?\n\n"))))
#+END_SRC

*** lang/rest
#+begin_src emacs-lisp
(setq! restclient-same-buffer-response nil
       restclient-same-buffer-response-name "restclient-response")
#+end_src

*** lang/rust
#+begin_src emacs-lisp
(define-derived-mode cargo-run-interactive-mode
  comint-mode "cargo-run-interactive")

(defun +custom/cargo-run-interactive ()
  "Build and run Rust code and allow user input"
  (interactive)
   (rustic-cargo-run)
  (let (
      (orig-win (selected-window))
      (run-win (display-buffer (get-buffer "*cargo-run*") nil 'visible))
    )
    (select-window run-win)
    (cargo-run-interactive-mode)
    (read-only-mode 0)
  )
)

(map! :after rustic
      :localleader
      :map rustic-mode-map
      :prefix "b"
      :desc "cargo run - allow input" :n "R" #'+custom/cargo-run-interactive)

(map!
 :map cargo-run-interactive-mode-map
 :n
 "q" #'quit-window)

;; (setq! lsp-rust-analyzer-server-display-inlay-hints t)

;; (after! rustic
;;   (add-to-list 'flycheck-checkers 'rustic-clippy))
#+end_src

*** lang/sql
#+begin_src emacs-lisp
(after! sql
  :config
  (+sql/add-postgres-db
   kizen-local
   :port 5432
   :user "postgres"
   :host "localhost"
   :database "evos"
   :password "evos"))
#+end_src

*** term/vterm
#+begin_src emacs-lisp
(after! vterm
 (define-key vterm-mode-map (kbd "<C-backspace>")
   (lambda () (interactive) (vterm-send-key (kbd "C-w"))))
 )

(defun evil-collection-vterm-escape-stay ()
  "Go back to normal state but don't move
cursor backwards. Moving cursor backwards is the default vim behavior but it is
not appropriate in some cases like terminals."
  (setq-local evil-move-cursor-back nil))

(add-hook! 'vterm-mode-hook #'evil-collection-vterm-escape-stay)
#+end_src

*** tools/rgb

**** Disable x colors in ~rainbow-mode~

#+begin_src emacs-lisp
(after! rainbow-mode
  (setq rainbow-x-colors nil))
#+END_SRC

*** tools/magit

#+begin_src emacs-lisp
(after! magit
  (map! :map git-commit-mode-map
        :localleader
        :desc "Save commit message" "c" #'with-editor-finish))

(after! github-review
  (map! :map github-review-mode-map
        :localleader
        :desc "Comment on a PR" "c" #'github-review-comment)
  (map! :map github-review-mode-map
        :localleader
        :desc "Approve PR" "a" #'github-review-approve))

(setq! magit-prefer-remote-upstream t)
#+END_SRC

*** tools/lsp

#+begin_src emacs-lisp
(after! lsp
  (dolist
      (dir '("[/\\\\]postgres-data"))
    (push dir lsp-file-watch-ignored))
  )

(setq! lsp-headerline-breadcrumb-enable nil
       lsp-file-watch-threshold nil)

;; Disable invasive lsp-mode features
(setq! lsp-ui-sideline-enable nil   ; not anymore useful than flycheck
      lsp-ui-doc-enable nil        ; slow and redundant with K
      lsp-enable-symbol-highlighting nil
      ;; If an LSP server isn't present when I start a prog-mode buffer, you
      ;; don't need to tell me. I know. On some systems I don't care to have a
      ;; whole development environment for some ecosystems.
      +lsp-prompt-to-install-server 'quiet)

(after! lsp
  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.postgres-data\\'")
  ))


(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.postgres-data\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\postgres-data\\'")
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.postgres-data\\'")
  (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\postgres-data\\'")

  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\migrations\\'")

  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.ipython\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\ipython\\'")

  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.pytest_cache\\'")
)
#+end_src

*** tools/kubel
#+begin_src emacs-lisp
(use-package! kubel
  :commands
  (kubel)
  :config
  (setq
   kubel-use-namespace-list 'off
   kubel-namespace "staging"))
#+end_src

*** ui/doom
Doom user interface settings

**** Fonts
Settings *related* to fonts within Doom Emacs:
+ 'doom-font' – standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' – variable font which is useful in some Emacs plugins.
+ 'doom-big-font' – used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' – for comments.
+ 'font-lock-keyword-face' – for keywords with special significance, like 'for' and 'if' in C.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 14)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 15)
      doom-big-font (font-spec :family "Source Code Pro" :size 20))
(after! doom-themes
  (setq doom-themes-enable-bold nil
        doom-themes-enable-italic nil))
;; (custom-set-faces!
;;   '(font-lock-comment-face :slant italic)
;;   '(font-lock-keyword-face :slant italic))
#+END_SRC

**** Line Numbers
Use vim-esque relative line numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

**** Hide encoding in modeline
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case."
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook! 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

#+END_SRC

**** Enable uniquify
#+begin_src emacs-lisp
;;; doom's `persp-mode' activation disables uniquify, b/c it says it breaks it.
;;; It doesn't cause big enough problems for me to worry about it, so we override
;;; the override. `persp-mode' is activated in the `doom-init-ui-hook', so we add
;;; another hook at the end of the list of hooks to set our uniquify values.
(add-hook! 'doom-init-ui-hook
           :append ;; ensure it gets added to the end.
           #'(lambda () (require 'uniquify) (setq uniquify-buffer-name-style 'forward)))
#+end_src

*** ui/doom-dashboard
Set the doom-dashboard banner to
[[./banners/default.png]]

**** Set banner

#+begin_src emacs-lisp
(add-hook! '(+doom-dashboard-mode-hook)
  (setq fancy-splash-image (concat doom-private-dir "banners/default.png")))
#+END_SRC

*** ui/indent-guides

**** Use responsive highlights

#+begin_src emacs-lisp
(after! highlight-indent-guides
  (setq highlight-indent-guides-responsive 'top))
#+END_SRC

**** Set indent guide character

#+begin_src emacs-lisp
(after! highlight-indent-guides
  (setq highlight-indent-guides-character ?\┆))
#+END_SRC

**** Indent guide colors

#+begin_src emacs-lisp
(after! highlight-indent-guides
  (setq highlight-indent-guides-auto-enabled 'top)
  (set-face-attribute 'highlight-indent-guides-odd-face nil :inherit 'highlight-indentation-odd-face)
  (set-face-attribute 'highlight-indent-guides-even-face nil :inherit 'highlight-indentation-even-face)
  (set-face-foreground 'highlight-indent-guides-character-face (doom-color 'base5)))
#+END_SRC

*** ui/treemacs

**** Have treemacs follow the currently open file

#+begin_src emacs-lisp
(add-hook 'treemacs-mode #'treemacs-follow-mode)
#+END_SRC

*** ui/window-select

**** Custom font-face

#+begin_src emacs-lisp
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 2.5 :box (:line-width 10 :color "red")))
#+end_src

** Custom Packages
*** org-jira
#+begin_src emacs-lisp
(make-directory "~/.org-jira" 'ignore-if-exists)
(setq jiralib-url "https://kizen.atlassian.net")
#+end_src

*** Tramp
#+begin_src emacs-lisp
(after! tramp
  (setq tramp-inline-compress-start-size 1000)
  (setq tramp-copy-size-limit 10000)
  (setq vc-handled-backends '(Git))
  (setq tramp-verbose 1)
  (setq tramp-default-method "scp")
  (setq tramp-use-ssh-controlmaster-options nil)
  (setq projectile--mode-line "Projectile")
  (setq tramp-verbose 1))

(add-hook! 'find-file-hook
           (lambda ()
             (when (file-remote-p default-directory)
               (setq-local projectile-mode-line "Projectile"))))

(setq! remote-file-name-inhibit-cache nil)
(setq! vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
(setq! tramp-verbose 1)
#+end_src

*** ox-gfm
#+begin_src emacs-lisp
(use-package! ox-gfm)
#+end_src

*** copilot
#+begin_src emacs-lisp
;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         ("C-<tab>" . 'copilot-accept-completion-by-word)
         :map copilot-completion-map
         ("C-S-j" . 'copilot-next-completion)
         ("C-S-k" . 'copilot-previous-completion)
         ("C-l" . 'copilot-accept-completion-by-word)
         ("C-S-l" . 'copilot-accept-completion-by-line)
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)))
#+end_src
